--- Old/com/mojang/minecraft/renderer/Tesselator.java	2021-07-18 13:06:06.667284700 +0200
+++ New/com/mojang/minecraft/renderer/Tesselator.java	2021-08-07 19:21:22.911465700 +0200
@@ -6,9 +6,9 @@
 
 public class Tesselator {
    private static final int MAX_MEMORY_USE = 4194304;
-   private static final int MAX_FLOATS = 524288;
-   private FloatBuffer buffer = BufferUtils.createFloatBuffer(524288);
-   private float[] array = new float[524288];
+   private static final int MAX_FLOATS = MAX_MEMORY_USE / 8;
+   private FloatBuffer buffer = BufferUtils.createFloatBuffer(MAX_FLOATS);
+   private float[] array = new float[MAX_FLOATS];
    private int vertices = 0;
    private float u;
    private float v;
@@ -26,73 +26,73 @@
    }
 
    public void flush() {
-      if (this.vertices > 0) {
-         this.buffer.clear();
-         this.buffer.put(this.array, 0, this.p);
-         this.buffer.flip();
-         if (this.hasTexture && this.hasColor) {
-            GL11.glInterleavedArrays(10794, 0, (FloatBuffer)this.buffer);
-         } else if (this.hasTexture) {
-            GL11.glInterleavedArrays(10791, 0, (FloatBuffer)this.buffer);
-         } else if (this.hasColor) {
-            GL11.glInterleavedArrays(10788, 0, (FloatBuffer)this.buffer);
+      if (vertices > 0) {
+         buffer.clear();
+         buffer.put(array, 0, p);
+         buffer.flip();
+         if (hasTexture && hasColor) {
+            GL11.glInterleavedArrays(GL11.GL_T2F_C3F_V3F, 0, buffer);
+         } else if (hasTexture) {
+            GL11.glInterleavedArrays(GL11.GL_T2F_V3F, 0, buffer);
+         } else if (hasColor) {
+            GL11.glInterleavedArrays(GL11.GL_C3F_V3F, 0, buffer);
          } else {
-            GL11.glInterleavedArrays(10785, 0, (FloatBuffer)this.buffer);
+            GL11.glInterleavedArrays(GL11.GL_V3F, 0, buffer);
          }
 
-         GL11.glEnableClientState(32884);
-         if (this.hasTexture) {
-            GL11.glEnableClientState(32888);
+         GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
+         if (hasTexture) {
+            GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
          }
 
-         if (this.hasColor) {
-            GL11.glEnableClientState(32886);
+         if (hasColor) {
+            GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
          }
 
-         GL11.glDrawArrays(7, 0, this.vertices);
-         GL11.glDisableClientState(32884);
-         if (this.hasTexture) {
-            GL11.glDisableClientState(32888);
+         GL11.glDrawArrays(GL11.GL_QUADS, 0, vertices);
+         GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
+         if (hasTexture) {
+            GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
          }
 
-         if (this.hasColor) {
-            GL11.glDisableClientState(32886);
+         if (hasColor) {
+            GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
          }
       }
 
-      this.clear();
+      clear();
    }
 
    private void clear() {
-      this.vertices = 0;
-      this.buffer.clear();
-      this.p = 0;
+      vertices = 0;
+      buffer.clear();
+      p = 0;
    }
 
    public void init() {
-      this.clear();
-      this.hasColor = false;
-      this.hasTexture = false;
-      this.noColor = false;
+      clear();
+      hasColor = false;
+      hasTexture = false;
+      noColor = false;
    }
 
    public void tex(float u, float v) {
-      if (!this.hasTexture) {
-         this.len += 2;
+      if (!hasTexture) {
+         len += 2;
       }
 
-      this.hasTexture = true;
+      hasTexture = true;
       this.u = u;
       this.v = v;
    }
 
    public void color(float r, float g, float b) {
-      if (!this.noColor) {
-         if (!this.hasColor) {
-            this.len += 3;
+      if (!noColor) {
+         if (!hasColor) {
+            len += 3;
          }
 
-         this.hasColor = true;
+         hasColor = true;
          this.r = r;
          this.g = g;
          this.b = b;
@@ -100,28 +100,28 @@
    }
 
    public void vertexUV(float x, float y, float z, float u, float v) {
-      this.tex(u, v);
-      this.vertex(x, y, z);
+      tex(u, v);
+      vertex(x, y, z);
    }
 
    public void vertex(float x, float y, float z) {
-      if (this.hasTexture) {
-         this.array[this.p++] = this.u;
-         this.array[this.p++] = this.v;
-      }
-
-      if (this.hasColor) {
-         this.array[this.p++] = this.r;
-         this.array[this.p++] = this.g;
-         this.array[this.p++] = this.b;
-      }
-
-      this.array[this.p++] = x;
-      this.array[this.p++] = y;
-      this.array[this.p++] = z;
-      ++this.vertices;
-      if (this.vertices % 4 == 0 && this.p >= 524288 - this.len * 4) {
-         this.flush();
+      if (hasTexture) {
+         array[p++] = u;
+         array[p++] = v;
+      }
+
+      if (hasColor) {
+         array[p++] = r;
+         array[p++] = g;
+         array[p++] = b;
+      }
+
+      array[p++] = x;
+      array[p++] = y;
+      array[p++] = z;
+      ++vertices;
+      if (vertices % 4 == 0 && p >= MAX_FLOATS - len * 4) {
+         flush();
       }
 
    }
@@ -130,10 +130,10 @@
       float r = (float)(c >> 16 & 255) / 255.0F;
       float g = (float)(c >> 8 & 255) / 255.0F;
       float b = (float)(c & 255) / 255.0F;
-      this.color(r, g, b);
+      color(r, g, b);
    }
 
    public void noColor() {
-      this.noColor = true;
+      noColor = true;
    }
 }
