--- Old/com/mojang/minecraft/comm/SocketConnection.java	2021-07-18 13:06:06.642004300 +0200
+++ New/com/mojang/minecraft/comm/SocketConnection.java	2021-08-07 19:42:46.098956600 +0200
@@ -13,25 +13,25 @@
    public static final int BUFFER_SIZE = 131068;
    private boolean connected;
    private SocketChannel socketChannel;
-   public ByteBuffer readBuffer = ByteBuffer.allocate(131068);
-   public ByteBuffer writeBuffer = ByteBuffer.allocate(131068);
+   public ByteBuffer readBuffer = ByteBuffer.allocate(BUFFER_SIZE);
+   public ByteBuffer writeBuffer = ByteBuffer.allocate(BUFFER_SIZE);
    protected long lastRead;
    private ConnectionListener connectionListener;
    private int bytesRead;
    private int totalBytesWritten;
-   private int maxBlocksPerIteration = 3;
+   private int maxBlocksPerIteration = 3; // Not sure where to place this variable.
    private Socket socket;
    private BufferedInputStream in;
    private BufferedOutputStream out;
 
    public SocketConnection(String ip, int port) throws UnknownHostException, IOException {
-      this.socketChannel = SocketChannel.open();
-      this.socketChannel.connect(new InetSocketAddress(ip, port));
-      this.socketChannel.configureBlocking(false);
-      this.lastRead = System.currentTimeMillis();
-      this.connected = true;
-      this.readBuffer.clear();
-      this.writeBuffer.clear();
+      socketChannel = SocketChannel.open();
+      socketChannel.connect(new InetSocketAddress(ip, port));
+      socketChannel.configureBlocking(false);
+      lastRead = System.currentTimeMillis();
+      connected = true;
+      readBuffer.clear();
+      writeBuffer.clear();
    }
 
    public void setMaxBlocksPerIteration(int maxBlocksPerIteration) {
@@ -39,21 +39,21 @@
    }
 
    public String getIp() {
-      return this.socket.getInetAddress().toString();
+      return socket.getInetAddress().toString();
    }
 
    public SocketConnection(SocketChannel socketChannel) throws IOException {
       this.socketChannel = socketChannel;
       socketChannel.configureBlocking(false);
-      this.lastRead = System.currentTimeMillis();
-      this.socket = socketChannel.socket();
-      this.connected = true;
-      this.readBuffer.clear();
-      this.writeBuffer.clear();
+      lastRead = System.currentTimeMillis();
+      socket = socketChannel.socket();
+      connected = true;
+      readBuffer.clear();
+      writeBuffer.clear();
    }
 
    public ByteBuffer getBuffer() {
-      return this.writeBuffer;
+      return writeBuffer;
    }
 
    public void setConnectionListener(ConnectionListener connectionListener) {
@@ -61,38 +61,38 @@
    }
 
    public boolean isConnected() {
-      return this.connected;
+      return connected;
    }
 
    public void disconnect() {
-      this.connected = false;
+      connected = false;
 
       try {
-         if (this.in != null) {
-            this.in.close();
+         if (in != null) {
+            in.close();
          }
 
-         this.in = null;
+         in = null;
       } catch (Exception var4) {
          var4.printStackTrace();
       }
 
       try {
-         if (this.out != null) {
-            this.out.close();
+         if (out != null) {
+            out.close();
          }
 
-         this.out = null;
+         out = null;
       } catch (Exception var3) {
          var3.printStackTrace();
       }
 
       try {
-         if (this.socket != null) {
-            this.socket.close();
+         if (socket != null) {
+            socket.close();
          }
 
-         this.socket = null;
+         socket = null;
       } catch (Exception var2) {
          var2.printStackTrace();
       }
@@ -100,31 +100,31 @@
    }
 
    public void tick() throws IOException {
-      this.writeBuffer.flip();
-      this.socketChannel.write(this.writeBuffer);
-      this.writeBuffer.compact();
-      this.readBuffer.compact();
-      this.socketChannel.read(this.readBuffer);
-      this.readBuffer.flip();
-      if (this.readBuffer.remaining() > 0) {
-         this.connectionListener.command(this.readBuffer.get(0), this.readBuffer.remaining(), this.readBuffer);
+      writeBuffer.flip();
+      socketChannel.write(this.writeBuffer);
+      writeBuffer.compact();
+      readBuffer.compact();
+      socketChannel.read(this.readBuffer);
+      readBuffer.flip();
+      if (readBuffer.remaining() > 0) {
+         connectionListener.command(readBuffer.get(0), readBuffer.remaining(), readBuffer);
       }
 
    }
 
    public int getSentBytes() {
-      return this.totalBytesWritten;
+      return totalBytesWritten;
    }
 
    public int getReadBytes() {
-      return this.bytesRead;
+      return bytesRead;
    }
 
    public void clearSentBytes() {
-      this.totalBytesWritten = 0;
+      totalBytesWritten = 0;
    }
 
    public void clearReadBytes() {
-      this.bytesRead = 0;
+      bytesRead = 0;
    }
 }
