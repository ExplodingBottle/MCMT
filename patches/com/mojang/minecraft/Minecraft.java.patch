--- Old/com/mojang/minecraft/Minecraft.java	2021-07-18 13:06:06.664320600 +0200
+++ New/com/mojang/minecraft/Minecraft.java	2021-07-18 18:00:01.177806500 +0200
@@ -1,23 +1,14 @@
 package com.mojang.minecraft;
 
-import com.mojang.minecraft.character.Zombie;
-import com.mojang.minecraft.gui.Font;
-import com.mojang.minecraft.level.Chunk;
-import com.mojang.minecraft.level.Level;
-import com.mojang.minecraft.level.LevelRenderer;
-import com.mojang.minecraft.level.tile.Tile;
-import com.mojang.minecraft.particle.ParticleEngine;
-import com.mojang.minecraft.phys.AABB;
-import com.mojang.minecraft.renderer.Frustum;
-import com.mojang.minecraft.renderer.Tesselator;
-import com.mojang.minecraft.renderer.Textures;
 import java.awt.Canvas;
 import java.awt.Component;
 import java.io.IOException;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.util.ArrayList;
+
 import javax.swing.JOptionPane;
+
 import org.lwjgl.BufferUtils;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Cursor;
@@ -28,8 +19,20 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
+import com.mojang.minecraft.character.Zombie;
+import com.mojang.minecraft.gui.Font;
+import com.mojang.minecraft.level.Chunk;
+import com.mojang.minecraft.level.Level;
+import com.mojang.minecraft.level.LevelRenderer;
+import com.mojang.minecraft.level.tile.Tile;
+import com.mojang.minecraft.particle.ParticleEngine;
+import com.mojang.minecraft.phys.AABB;
+import com.mojang.minecraft.renderer.Frustum;
+import com.mojang.minecraft.renderer.Tesselator;
+import com.mojang.minecraft.renderer.Textures;
+
 public class Minecraft implements Runnable {
-   public static final String VERSION_STRING = "0.0.11a";
+   public static final String VERSION_STRING = "0.0.11a/Modded with MCMT";
    private boolean fullscreen = false;
    private int width;
    private int height;
@@ -41,7 +44,7 @@
    private Player player;
    private int paintTexture = 1;
    private ParticleEngine particleEngine;
-   private ArrayList entities = new ArrayList();
+   private ArrayList<Entity> entities = new ArrayList<>();
    private Canvas parent;
    public boolean appletMode = false;
    public volatile boolean pause = false;
@@ -86,7 +89,7 @@
          Display.setDisplayMode(new DisplayMode(this.width, this.height));
       }
 
-      Display.setTitle("Minecraft 0.0.11a");
+      Display.setTitle("Minecraft " + VERSION_STRING);
 
       try {
          Display.create();
@@ -104,17 +107,17 @@
       Keyboard.create();
       Mouse.create();
       this.checkGlError("Pre startup");
-      GL11.glEnable(3553);
-      GL11.glShadeModel(7425);
+      GL11.glEnable(GL11.GL_TEXTURE_2D);
+      GL11.glShadeModel(GL11.GL_SMOOTH);
       GL11.glClearColor(fr, fg, fb, 0.0F);
       GL11.glClearDepth(1.0D);
-      GL11.glEnable(2929);
-      GL11.glDepthFunc(515);
-      GL11.glEnable(3008);
-      GL11.glAlphaFunc(516, 0.0F);
-      GL11.glMatrixMode(5889);
+      GL11.glEnable(GL11.GL_DEPTH_TEST);
+      GL11.glDepthFunc(GL11.GL_LEQUAL);
+      GL11.glEnable(GL11.GL_ALPHA_TEST);
+      GL11.glAlphaFunc(GL11.GL_GREATER, 0.0F);
+      GL11.glMatrixMode(GL11.GL_PROJECTION);
       GL11.glLoadIdentity();
-      GL11.glMatrixMode(5888);
+      GL11.glMatrixMode(GL11.GL_MODELVIEW);
       this.checkGlError("Startup");
       this.level = new Level(256, 256, 64);
       this.levelRenderer = new LevelRenderer(this.level, this.textures);
@@ -330,39 +333,39 @@
             }
          } while(!Keyboard.getEventKeyState());
 
-         if (Keyboard.getEventKey() == 1 && (this.appletMode || !this.fullscreen)) {
+         if (Keyboard.getEventKey() == Keyboard.KEY_ESCAPE && (this.appletMode || !this.fullscreen)) {
             this.releaseMouse();
          }
 
-         if (Keyboard.getEventKey() == 28) {
+         if (Keyboard.getEventKey() == Keyboard.KEY_RETURN) {
             this.level.save();
          }
 
-         if (Keyboard.getEventKey() == 2) {
-            this.paintTexture = 1;
+         if (Keyboard.getEventKey() == Keyboard.KEY_1) {
+            this.paintTexture = Tile.rock.id;
          }
 
-         if (Keyboard.getEventKey() == 3) {
-            this.paintTexture = 3;
+         if (Keyboard.getEventKey() == Keyboard.KEY_2) {
+            this.paintTexture = Tile.dirt.id;
          }
 
-         if (Keyboard.getEventKey() == 4) {
-            this.paintTexture = 4;
+         if (Keyboard.getEventKey() == Keyboard.KEY_3) {
+            this.paintTexture = Tile.stoneBrick.id;
          }
 
-         if (Keyboard.getEventKey() == 5) {
-            this.paintTexture = 5;
+         if (Keyboard.getEventKey() == Keyboard.KEY_4) {
+            this.paintTexture = Tile.wood.id;
          }
 
-         if (Keyboard.getEventKey() == 7) {
-            this.paintTexture = 6;
+         if (Keyboard.getEventKey() == Keyboard.KEY_6) {
+            this.paintTexture = Tile.bush.id;
          }
 
-         if (Keyboard.getEventKey() == 21) {
+         if (Keyboard.getEventKey() == Keyboard.KEY_Y) {
             this.yMouseAxis *= -1;
          }
 
-         if (Keyboard.getEventKey() == 34) {
+         if (Keyboard.getEventKey() == Keyboard.KEY_G) {
             this.entities.add(new Zombie(this.level, this.textures, this.player.x, this.player.y, this.player.z));
          }
       }
@@ -393,24 +396,24 @@
    }
 
    private void setupCamera(float a) {
-      GL11.glMatrixMode(5889);
+      GL11.glMatrixMode(GL11.GL_PROJECTION);
       GL11.glLoadIdentity();
       GLU.gluPerspective(70.0F, (float)this.width / (float)this.height, 0.05F, 1000.0F);
-      GL11.glMatrixMode(5888);
+      GL11.glMatrixMode(GL11.GL_MODELVIEW);
       GL11.glLoadIdentity();
       this.moveCameraToPlayer(a);
    }
 
    private void setupPickCamera(float a, int x, int y) {
-      GL11.glMatrixMode(5889);
+      GL11.glMatrixMode(GL11.GL_PROJECTION);
       GL11.glLoadIdentity();
       this.viewportBuffer.clear();
-      GL11.glGetInteger(2978, this.viewportBuffer);
+      GL11.glGetInteger(GL11.GL_VIEWPORT, this.viewportBuffer);
       this.viewportBuffer.flip();
       this.viewportBuffer.limit(16);
       GLU.gluPickMatrix((float)x, (float)y, 5.0F, 5.0F, this.viewportBuffer);
       GLU.gluPerspective(70.0F, (float)this.width / (float)this.height, 0.05F, 1000.0F);
-      GL11.glMatrixMode(5888);
+      GL11.glMatrixMode(GL11.GL_MODELVIEW);
       GL11.glLoadIdentity();
       this.moveCameraToPlayer(a);
    }
@@ -418,10 +421,10 @@
    private void pick(float a) {
       this.selectBuffer.clear();
       GL11.glSelectBuffer(this.selectBuffer);
-      GL11.glRenderMode(7170);
+      GL11.glRenderMode(GL11.GL_SELECT);
       this.setupPickCamera(a, this.width / 2, this.height / 2);
       this.levelRenderer.pick(this.player, Frustum.getFrustum());
-      int hits = GL11.glRenderMode(7168);
+      int hits = GL11.glRenderMode(GL11.GL_RENDER);
       this.selectBuffer.flip();
       this.selectBuffer.limit(this.selectBuffer.capacity());
       long closest = 0L;
@@ -480,15 +483,15 @@
       this.checkGlError("Set viewport");
       this.pick(a);
       this.checkGlError("Picked");
-      GL11.glClear(16640);
+      GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
       this.setupCamera(a);
       this.checkGlError("Set up camera");
-      GL11.glEnable(2884);
+      GL11.glEnable(GL11.GL_CULL_FACE);
       Frustum frustum = Frustum.getFrustum();
       this.levelRenderer.updateDirtyChunks(this.player);
       this.checkGlError("Update chunks");
       this.setupFog(0);
-      GL11.glEnable(2912);
+      GL11.glEnable(GL11.GL_FOG);
       this.levelRenderer.render(this.player, 0);
       this.checkGlError("Rendered level");
 
@@ -515,14 +518,14 @@
       }
 
       this.particleEngine.render(this.player, a, 1);
-      GL11.glDisable(2896);
-      GL11.glDisable(3553);
-      GL11.glDisable(2912);
+      GL11.glDisable(GL11.GL_LIGHTING);
+      GL11.glDisable(GL11.GL_TEXTURE_2D);
+      GL11.glDisable(GL11.GL_FOG);
       this.checkGlError("Rendered rest");
       if (this.hitResult != null) {
-         GL11.glDisable(3008);
+         GL11.glDisable(GL11.GL_ALPHA_TEST);
          this.levelRenderer.renderHit(this.hitResult, this.editMode, this.paintTexture);
-         GL11.glEnable(3008);
+         GL11.glEnable(GL11.GL_ALPHA_TEST);
       }
 
       this.checkGlError("Rendered hit");
@@ -534,11 +537,11 @@
    private void drawGui(float a) {
       int screenWidth = this.width * 240 / this.height;
       int screenHeight = this.height * 240 / this.height;
-      GL11.glClear(256);
-      GL11.glMatrixMode(5889);
+      GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+      GL11.glMatrixMode(GL11.GL_PROJECTION);
       GL11.glLoadIdentity();
       GL11.glOrtho(0.0D, (double)screenWidth, (double)screenHeight, 0.0D, 100.0D, 300.0D);
-      GL11.glMatrixMode(5888);
+      GL11.glMatrixMode(GL11.GL_MODELVIEW);
       GL11.glLoadIdentity();
       GL11.glTranslatef(0.0F, 0.0F, -200.0F);
       this.checkGlError("GUI: Init");
@@ -550,16 +553,16 @@
       GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
       GL11.glTranslatef(-1.5F, 0.5F, -0.5F);
       GL11.glScalef(-1.0F, -1.0F, 1.0F);
-      int id = this.textures.loadTexture("/terrain.png", 9728);
-      GL11.glBindTexture(3553, id);
-      GL11.glEnable(3553);
+      int id = this.textures.loadTexture("/terrain.png", GL11.GL_NEAREST);
+      GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
+      GL11.glEnable(GL11.GL_TEXTURE_2D);
       t.init();
       Tile.tiles[this.paintTexture].render(t, this.level, 0, -2, 0, 0);
       t.flush();
-      GL11.glDisable(3553);
+      GL11.glDisable(GL11.GL_TEXTURE_2D);
       GL11.glPopMatrix();
       this.checkGlError("GUI: Draw selected");
-      this.font.drawShadow("0.0.11a", 2, 2, 16777215);
+      this.font.drawShadow(Minecraft.VERSION_STRING, 2, 2, 16777215);
       this.font.drawShadow(this.fpsString, 2, 12, 16777215);
       this.checkGlError("GUI: Draw text");
       int wc = screenWidth / 2;
@@ -580,18 +583,18 @@
 
    private void setupFog(int i) {
       if (i == 0) {
-         GL11.glFogi(2917, 2048);
-         GL11.glFogf(2914, 0.001F);
-         GL11.glFog(2918, (FloatBuffer)this.fogColor0);
-         GL11.glDisable(2896);
+         GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+         GL11.glFogf(GL11.GL_FOG_DENSITY, 0.001F);
+         GL11.glFog(GL11.GL_FOG_COLOR, (FloatBuffer)this.fogColor0);
+         GL11.glDisable(GL11.GL_LIGHTING);
       } else if (i == 1) {
-         GL11.glFogi(2917, 2048);
-         GL11.glFogf(2914, 0.01F);
-         GL11.glFog(2918, (FloatBuffer)this.fogColor1);
-         GL11.glEnable(2896);
-         GL11.glEnable(2903);
+         GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
+         GL11.glFogf(GL11.GL_FOG_DENSITY, 0.01F);
+         GL11.glFog(GL11.GL_FOG_COLOR, (FloatBuffer)this.fogColor1);
+         GL11.glEnable(GL11.GL_LIGHTING);
+         GL11.glEnable(GL11.GL_COLOR_MATERIAL);
          float br = 0.6F;
-         GL11.glLightModel(2899, (FloatBuffer)this.getBuffer(br, br, br, 1.0F));
+         GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, (FloatBuffer)this.getBuffer(br, br, br, 1.0F));
       }
 
    }
